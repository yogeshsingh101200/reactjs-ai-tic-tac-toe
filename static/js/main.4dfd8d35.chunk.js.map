{"version":3,"sources":["index.js"],"names":["actions","squares","set","Set","forEach","square","index","add","player","cnt1","cnt2","result","action","updated_squares","slice","terminal","calculateWinner","utility","W","maxvalue","depth","score","v","Infinity","Math","max","minvalue","min","lines","i","length","a","b","c","boardmap","Square","props","onClick","className","location","value","Board","this","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","setState","concat","step","move","optimal_score","optimal_state","val","minimax","undo","status","current","winner","isAImode","choosedPlayer","disabled","jumpTo","setTimeout","makeAiMove","handleClick","GameOptions","playerChoosed","modeSelected","option","markPlayer","markMode","ReactDOM","render","document","getElementById"],"mappings":"sPAMA,SAASA,EAAQC,GACb,IAAIC,EAAM,IAAIC,IAMd,OALAF,EAAQG,SAAQ,SAACC,EAAQC,GAChBD,GACDH,EAAIK,IAAID,MAGTJ,EAIX,SAASM,EAAOP,GACZ,IADqB,EACjBQ,EAAO,EACPC,EAAO,EAFU,cAGFT,GAHE,IAGrB,2BAA4B,CAAC,IAApBI,EAAmB,QACT,MAAXA,IAAkBI,EACF,MAAXJ,KAAkBK,GALV,8BAOrB,OAAID,EAAOC,EAAa,IACZ,IAGhB,SAASC,EAAOV,EAASW,GACrB,IAAMC,EAAkBZ,EAAQa,QAEhC,OADAD,EAAgBD,GAAUJ,EAAOP,GAC1BY,EAGX,SAASE,EAASd,GACd,GAAIe,EAAgBf,GAAU,OAAO,EADd,oBAEJA,GAFI,IAEvB,2BAA4B,CACxB,IADwB,QACX,OAAO,GAHD,8BAKvB,OAAO,EAGX,SAASgB,EAAQhB,GACb,IAAMiB,EAAIF,EAAgBf,GAK1B,MAHU,MAANiB,EAAmB,GACR,MAANA,GAAoB,GAChB,EAIjB,SAASC,EAASlB,EAASmB,GACvB,GAAIL,EAASd,GAAU,CACnB,IAAMoB,EAAQJ,EAAQhB,GACtB,OAAIoB,EAAQ,EAAUA,EAAQD,EACrBC,EAAQ,EAAUA,EAAQD,EAC5BC,EAEX,IAP8B,EAO1BC,GAAKC,IAPqB,cAQXvB,EAAQC,IARG,IAQ9B,2BAAqC,CAAC,IAA7BW,EAA4B,QACjCU,EAAIE,KAAKC,IAAIH,EAAGI,EAASf,EAAOV,EAASW,GAASQ,EAAQ,KAThC,8BAW9B,OAAOE,EAIX,SAASI,EAASzB,EAASmB,GACvB,GAAIL,EAASd,GAAU,CACnB,IAAMoB,EAAQJ,EAAQhB,GACtB,OAAIoB,EAAQ,EAAUA,EAAQD,EACrBC,EAAQ,EAAUA,EAAQD,EAC5BC,EAEX,IAP8B,EAO1BC,EAAIC,IAPsB,cAQXvB,EAAQC,IARG,IAQ9B,2BAAqC,CAAC,IAA7BW,EAA4B,QACjCU,EAAIE,KAAKG,IAAIL,EAAGH,EAASR,EAAOV,EAASW,GAASQ,EAAQ,KAThC,8BAW9B,OAAOE,EA8BX,SAASN,EAAgBf,GAWrB,IAVA,IAAM2B,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAC,IAAD,cACjBD,EAAMC,GADW,GAC5BE,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAIhC,EAAQ8B,IAAM9B,EAAQ8B,KAAO9B,EAAQ+B,IAAM/B,EAAQ8B,KAAO9B,EAAQgC,GAClE,OAAOhC,EAAQ8B,GAGvB,OAAO,KAGX,IAAMG,EAAW,CACb,WAAY,MAAO,YACnB,cAAe,SAAU,eACzB,cAAe,SAAU,gBAG7B,SAASC,EAAOC,GACZ,OAAIA,EAAMC,QAEF,4BAAQC,UAAS,iBAAYJ,EAASE,EAAMG,WAAaF,QAASD,EAAMC,SACnED,EAAMI,OAKX,4BAAQF,UAAS,iBAAYJ,EAASE,EAAMG,YACvCH,EAAMI,O,IAMjBC,E,2KACWZ,GAAI,IAAD,OACZ,OAAIa,KAAKN,MAAMC,QAEP,kBAACF,EAAD,CACIK,MAAOE,KAAKN,MAAMnC,QAAQ4B,GAC1BU,SAAUV,EACVQ,QAAS,WAAQ,EAAKD,MAAMC,QAAQR,MAKxC,kBAACM,EAAD,CACIK,MAAOE,KAAKN,MAAMnC,QAAQ4B,GAC1BU,SAAUV,M,+BAOtB,OACI,6BACI,yBAAKS,UAAU,aACVI,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,IAEvB,yBAAKL,UAAU,aACVI,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,IAEvB,yBAAKL,UAAU,aACVI,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,S,GApCnBC,IAAMC,WA2CpBC,E,kDAEF,WAAYV,GAAQ,IAAD,8BACf,cAAMA,IACDW,MAAQ,CACTC,QAAS,CAAC,CACN/C,QAASgD,MAAM,GAAGC,KAAK,QAE3BC,WAAY,EACZC,SAAS,GAPE,E,wDAWPvB,GACR,IAAMmB,EAAUN,KAAKK,MAAMC,QAAQlC,MAAM,EAAG4B,KAAKK,MAAMI,WAAa,GAE9DlD,EADUyC,KAAKK,MAAMC,QAAQA,EAAQlB,OAAS,GAC5B7B,QAAQa,QAC5BE,EAAgBf,IAAYA,EAAQ4B,KAGxC5B,EAAQ4B,GAAKa,KAAKK,MAAMK,QAAU,IAAM,IACxCV,KAAKW,SAAS,CACVL,QAASA,EAAQM,OAAO,CAAC,CACrBrD,QAASA,KAEbkD,WAAYH,EAAQlB,OACpBsB,SAAUV,KAAKK,MAAMK,a,6BAItBG,GACHb,KAAKW,SAAS,CACVF,WAAYI,EACZH,QAAUG,EAAO,IAAO,M,mCAK5B,IAAMP,EAAUN,KAAKK,MAAMC,QAAQlC,MAAM,EAAG4B,KAAKK,MAAMI,WAAa,GAE9DlD,EADUyC,KAAKK,MAAMC,QAAQA,EAAQlB,OAAS,GAC5B7B,QAAQa,QAC1B0C,EAzJd,SAAiBvD,GACb,IAAIwD,EACAC,EAEJ,GAAwB,MAApBlD,EAAOP,GAAkB,CACzBwD,GAAiBlC,IADQ,oBAEPvB,EAAQC,IAFD,IAEzB,2BAAoC,CAAC,IAA5B8C,EAA2B,QAC5BY,EAAMjC,EAASf,EAAOV,EAAS8C,GAAQ,GACvCY,EAAMF,IACNA,EAAgBE,EAChBD,EAAgBX,IANC,mCAStB,CACHU,EAAgBlC,IADb,oBAEevB,EAAQC,IAFvB,IAEH,2BAAoC,CAAC,IAA5B8C,EAA2B,QAC5BY,EAAMxC,EAASR,EAAOV,EAAS8C,GAAQ,GACvCY,EAAMF,IACNA,EAAgBE,EAChBD,EAAgBX,IANrB,+BAUP,OAAOW,EAkIUE,CAAQ3D,GACjBe,EAAgBf,IAAYA,EAAQuD,KAGxCvD,EAAQuD,GAAQd,KAAKK,MAAMK,QAAU,IAAM,IAC3CV,KAAKW,SAAS,CACVL,QAASA,EAAQM,OAAO,CAAC,CACrBrD,QAASA,KAEbkD,WAAYH,EAAQlB,OACpBsB,SAAUV,KAAKK,MAAMK,a,+BAInB,IAKFS,EAsBAC,EA3BC,OAECC,EADUrB,KAAKK,MAAMC,QACHN,KAAKK,MAAMI,YAC7Ba,EAAShD,EAAgB+C,EAAQ9D,SAGvC,GAAIyC,KAAKN,MAAM6B,SACX,GAA+B,IAA1BvB,KAAKK,MAAMI,YAAiD,MAA7BT,KAAKN,MAAM8B,eACb,IAA1BxB,KAAKK,MAAMI,YAAiD,MAA7BT,KAAKN,MAAM8B,cAC9CL,EAAO,4BAAQvB,UAAU,kBAAkB6B,UAAQ,GAA5C,YACJ,CACH,IAAMX,EAAOd,KAAKK,MAAMI,WAAa,EACrCU,EAAO,4BACHvB,UAAU,kBACVD,QAAS,WAAQ,EAAK+B,OAAOZ,KAF1B,aAKX,GAAKd,KAAKK,MAAMI,WAET,CACH,IAAMK,EAAOd,KAAKK,MAAMI,WAAa,EACrCU,EAAO,4BACHvB,UAAU,kBACVD,QAAS,WAAQ,EAAK+B,OAAOZ,KAF1B,aAHPK,EAAO,4BAAQvB,UAAU,kBAAkB6B,UAAQ,GAA5C,QAUXH,EACAF,EAAS,yBAAKxB,UAAU,UAAf,WAAiC0B,GAGjCF,EADG/C,EAASgD,EAAQ9D,SACX,yBAAKqC,UAAU,OAAf,OACP,iBAAaI,KAAKK,MAAMK,QAAU,IAAM,KAGvD,OAAIV,KAAKN,MAAM6B,UAA2C,MAA7BvB,KAAKN,MAAM8B,gBAA2BxB,KAAKK,MAAMK,SAC1EiB,YAAW,WACP,EAAKC,eACN,KAEC,yBAAKhC,UAAU,QACX,yBAAKA,UAAU,eAAewB,GAC9B,yBAAKxB,UAAU,cACX,kBAACG,EAAD,CACIxC,QAAS8D,EAAQ9D,WAGzB,yBAAKqC,UAAU,aACX,4BAAQA,UAAU,kBAAkB6B,UAAQ,GAA5C,QACA,4BACI7B,UAAU,kBACVD,QAAS,WAAQ,EAAK+B,OAAO,KAFjC,cAWR,yBAAK9B,UAAU,QACX,yBAAKA,UAAU,eAAewB,GAC9B,yBAAKxB,UAAU,cACX,kBAACG,EAAD,CACIxC,QAAS8D,EAAQ9D,QACjBoC,QAAS,SAAAR,GAAO,EAAK0C,YAAY1C,OAGzC,yBAAKS,UAAU,aACVuB,EACD,4BACIvB,UAAU,kBACVD,QAAS,WAAQ,EAAK+B,OAAO,KAFjC,iB,GA9HLxB,IAAMC,WA2InB2B,E,kDACF,WAAYpC,GAAQ,IAAD,8BACf,cAAMA,IACDW,MAAQ,CACT0B,eAAe,EACfP,cAAe,KACfQ,cAAc,EACdT,SAAU,MANC,E,uDAURU,GACPjC,KAAKW,SAAS,CACVa,cAAeS,EACfF,eAAe,M,+BAIdE,GACLjC,KAAKW,SAAS,CACVY,SAAqB,IAAXU,EACVD,cAAc,M,+BAIZ,IAAD,OACL,OAAIhC,KAAKK,MAAM0B,eAAiB/B,KAAKK,MAAM2B,aAEnC,kBAAC5B,EAAD,CACIoB,cAAexB,KAAKK,MAAMmB,cAC1BD,SAAUvB,KAAKK,MAAMkB,WAKzB,yBAAK3B,UAAU,gBACX,yBAAKA,UAAU,UAAf,uBACA,4BAAQA,UAAU,gCAAgCD,QAAS,WAAQ,EAAKuC,WAAW,OAAnF,KACA,4BAAQtC,UAAU,gCAAgCD,QAAS,WAAQ,EAAKuC,WAAW,OAAnF,KACA,yBAAKtC,UAAU,UAAf,gBACA,4BAAQA,UAAU,gCAAgCD,QAAS,WAAQ,EAAKwC,SAAS,KAAjF,YACA,4BAAQvC,UAAU,gCAAgCD,QAAS,WAAQ,EAAKwC,SAAS,KAAjF,iB,GAzCMjC,IAAMC,WAkDhCiC,IAASC,OACL,kBAACP,EAAD,MACAQ,SAASC,eAAe,U","file":"static/js/main.4dfd8d35.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction actions(squares) {\n    let set = new Set();\n    squares.forEach((square, index) => {\n        if (!square) {\n            set.add(index);\n        }\n    });\n    return set;\n}\n\n\nfunction player(squares) {\n    let cnt1 = 0;\n    let cnt2 = 0;\n    for (let square of squares) {\n        if (square === 'X') ++cnt1;\n        else if (square === 'O') ++cnt2;\n    }\n    if (cnt1 > cnt2) return 'O';\n    else return 'X';\n}\n\nfunction result(squares, action) {\n    const updated_squares = squares.slice();\n    updated_squares[action] = player(squares);\n    return updated_squares;\n}\n\nfunction terminal(squares) {\n    if (calculateWinner(squares)) return true;\n    for (let square of squares) {\n        if (!square) return false;\n    }\n    return true;\n}\n\nfunction utility(squares) {\n    const W = calculateWinner(squares);\n    let score;\n    if (W === \"X\") score = 10;\n    else if (W === \"O\") score = -10;\n    else score = 0;\n    return score;\n}\n\nfunction maxvalue(squares, depth) {\n    if (terminal(squares)) {\n        const score = utility(squares);\n        if (score > 0) return score - depth;\n        else if (score < 0) return score + depth;\n        return score;\n    }\n    let v = -Infinity;\n    for (let action of actions(squares)) {\n        v = Math.max(v, minvalue(result(squares, action), depth + 1));\n    }\n    return v;\n}\n\n\nfunction minvalue(squares, depth) {\n    if (terminal(squares)) {\n        const score = utility(squares);\n        if (score > 0) return score - depth;\n        else if (score < 0) return score + depth;\n        return score;\n    }\n    let v = Infinity;\n    for (let action of actions(squares)) {\n        v = Math.min(v, maxvalue(result(squares, action), depth + 1));\n    }\n    return v;\n}\n\nfunction minimax(squares) {\n    let optimal_score;\n    let optimal_state;\n\n    if (player(squares) === \"X\") {\n        optimal_score = -Infinity;\n        for (let state of actions(squares)) {\n            let val = minvalue(result(squares, state), 0);\n            if (val > optimal_score) {\n                optimal_score = val;\n                optimal_state = state;\n            }\n        }\n    } else {\n        optimal_score = Infinity;\n        for (let state of actions(squares)) {\n            let val = maxvalue(result(squares, state), 0);\n            if (val < optimal_score) {\n                optimal_score = val;\n                optimal_state = state;\n            }\n        }\n    }\n    return optimal_state;\n}\n\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n\nconst boardmap = [\n    'top left', 'top', 'top right',\n    'middle left', 'middle', 'middle right',\n    'bottom left', 'bottom', 'bottom right'\n];\n\nfunction Square(props) {\n    if (props.onClick) {\n        return (\n            <button className={`square ${boardmap[props.location]}`} onClick={props.onClick}>\n                {props.value}\n            </button>\n        );\n    } else {\n        return (\n            <button className={`square ${boardmap[props.location]}`}>\n                {props.value}\n            </button>\n        );\n    }\n}\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        if (this.props.onClick) {\n            return (\n                <Square\n                    value={this.props.squares[i]}\n                    location={i}\n                    onClick={() => { this.props.onClick(i); }}\n                />\n            );\n        } else {\n            return (\n                <Square\n                    value={this.props.squares[i]}\n                    location={i}\n                />\n            );\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null),\n            }],\n            stepNumber: 0,\n            xIsNext: true,\n        };\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = this.state.history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n        this.setState({\n            history: history.concat([{\n                squares: squares\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n        });\n    };\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0,\n        });\n    }\n\n    makeAiMove() {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = this.state.history[history.length - 1];\n        const squares = current.squares.slice();\n        const move = minimax(squares);\n        if (calculateWinner(squares) || squares[move]) {\n            return;\n        }\n        squares[move] = this.state.xIsNext ? \"X\" : \"O\";\n        this.setState({\n            history: history.concat([{\n                squares: squares\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        let undo;\n        if (this.props.isAImode) {\n            if ((this.state.stepNumber === 0 && this.props.choosedPlayer === \"X\")\n                || (this.state.stepNumber === 1 && this.props.choosedPlayer === \"O\")) {\n                undo = <button className=\"btn btn-success\" disabled>Undo</button>;\n            } else {\n                const move = this.state.stepNumber - 2;\n                undo = <button\n                    className=\"btn btn-success\"\n                    onClick={() => { this.jumpTo(move); }}>Undo</button>;\n            }\n        } else {\n            if (!this.state.stepNumber) {\n                undo = <button className=\"btn btn-success\" disabled>Undo</button>;\n            } else {\n                const move = this.state.stepNumber - 1;\n                undo = <button\n                    className=\"btn btn-success\"\n                    onClick={() => { this.jumpTo(move); }}>Undo</button>;\n            }\n        }\n\n        let status;\n        if (winner) {\n            status = <div className=\"winner\">Winner: {winner}</div>;\n        } else {\n            const tie = terminal(current.squares);\n            if (tie) status = <div className=\"tie\">Tie</div>;\n            else status = `Turn : ${this.state.xIsNext ? 'X' : 'O'}`;\n        }\n\n        if (this.props.isAImode && ((this.props.choosedPlayer === \"O\") === this.state.xIsNext)) {\n            setTimeout(() => {\n                this.makeAiMove();\n            }, 500);\n            return (\n                <div className=\"game\">\n                    <div className=\"game-status\">{status}</div>\n                    <div className=\"game-board\">\n                        <Board\n                            squares={current.squares}\n                        />\n                    </div>\n                    <div className=\"game-info\">\n                        <button className=\"btn btn-success\" disabled>Undo</button>\n                        <button\n                            className=\"btn btn-success\"\n                            onClick={() => { this.jumpTo(0); }}\n                        >\n                            Restart\n                        </button>\n                    </div>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"game\">\n                    <div className=\"game-status\">{status}</div>\n                    <div className=\"game-board\">\n                        <Board\n                            squares={current.squares}\n                            onClick={i => { this.handleClick(i); }}\n                        />\n                    </div>\n                    <div className=\"game-info\">\n                        {undo}\n                        <button\n                            className=\"btn btn-success\"\n                            onClick={() => { this.jumpTo(0); }}\n                        >\n                            Restart\n                        </button>\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\nclass GameOptions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playerChoosed: false,\n            choosedPlayer: null,\n            modeSelected: false,\n            isAImode: null\n        };\n    }\n\n    markPlayer(option) {\n        this.setState({\n            choosedPlayer: option,\n            playerChoosed: true\n        });\n    }\n\n    markMode(option) {\n        this.setState({\n            isAImode: option === 1,\n            modeSelected: true\n        });\n    }\n\n    render() {\n        if (this.state.playerChoosed && this.state.modeSelected) {\n            return (\n                <Game\n                    choosedPlayer={this.state.choosedPlayer}\n                    isAImode={this.state.isAImode}\n                />\n            );\n        } else {\n            return (\n                <div className=\"game-options\">\n                    <div className=\"prompt\">Choose your player:</div>\n                    <button className=\"btn btn-primary btn-lg option\" onClick={() => { this.markPlayer(\"X\"); }}>X</button>\n                    <button className=\"btn btn-primary btn-lg option\" onClick={() => { this.markPlayer(\"O\"); }}>O</button>\n                    <div className=\"prompt\">Choose mode:</div>\n                    <button className=\"btn btn-primary btn-lg option\" onClick={() => { this.markMode(1); }}>1 Player</button>\n                    <button className=\"btn btn-primary btn-lg option\" onClick={() => { this.markMode(2); }}>2 Player</button>\n                </div>\n            );\n        }\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <GameOptions />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}